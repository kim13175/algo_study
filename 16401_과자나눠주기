#include <bits/stdc++.h>

using namespace std;

#define MAX 1000005

int m, n;
int snack[MAX];
int max_snack;

void input() {
	cin >> m >> n;
	for (int i = 0; i < n; i++) {
		cin >> snack[i];
		// 막대과자의 최대길이를 알아야 end 값을 정할 수 있기에 막대과자 최대 길이 구함
		max_snack = max(snack[i], max_snack);
	}
	// 정렬(정렬되지 않았을 경우를 생각해서)
	// 이분탐색은 정렬된 상태로 하지 않으면 탐색이 제대로 될 수 없다.
	sort(snack, snack + n); 
} // 입력

void solve() {
	int result = 0;
	// 과자 길이 최소
	int start = 1;
	// 과자 길이 최대
	int end = max_snack;
	// 이분 탐색 사용
	while (start < end) {
		// 중간값은 계속 갱신이 일어남 (위의 while문이 시작점과 끝점이 교차할 때까지 돌아가기 때문)
		int mid = (start + end) / 2;
		int per_snack = 0;
		// 과자 조각 수 (처음에는 맨처음 중앙값으로 나눠줌 (=> 기준 정하기))
		for (int i = 0; i < n; i++) {
			per_snack += snack[i] / mid;
		}
		// 과자를 충분히 나눠 줄 수 있음 (과자 조각이 m개 이상이면 나눠주기 가능)
		if (per_snack >= m) {
			result = mid;
			// mid 값 커짐
			start = mid + 1;
		} 
		// 과자를 못 나눠 줌(과자 조각이 m개 미만이면 못 나눠줌)
		else if (per_snack < m) {
			// mid 값 작아짐
			end = mid - 1;
		} 
	}
	cout << result << '\n';
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	input();
	solve();

	return 0;
}
